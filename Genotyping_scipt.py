#!/usr/bin/env python3
import sys
import regex
from collections import defaultdict
from Bio import SeqIO

def main():
    fastq_file = input("Enter the nanopore FASTQ input file: ").strip()

    # Define the markers (each marker corresponds to a region with a SNP)
    # Each marker contains:
    #   - name: a short description for the marker
    #   - left: the left (upstream) flanking sequence (before the SNP)
    #   - right: the right (downstream) flanking sequence (after the SNP)
    #   - alleles: the expected allele options at the SNP (e.g., ["A", "G"])
    markers = [
        {
            "name": "seabream vgll3",
            "left": "AACGTCTATCACCCTCACCCCCACCCACACATCCACACCCGGCACCACCACCCAATGCTCCATTCATACCCGACCCACAGCGCAGC",
            "right": "TTGGATCCCAGGTTTAACCCTCTGCTGCTGCCCGGTGTGAGGAACCAGAGCCAGCCGACTGCCAGCGCGGGGAGCTCCCCGCACAGCGAGGGGGTGAAGACAGAGATGGAGCCCAGCAGCAACAGCCCCGTCATGGCTACCTCTGTCACCTGGACGCCCTCGGCCCTCCATGGATCATTGGAGGTGTATGACTCAGGTAGATACCACAAGACAAATTCACCACAATCTTCACATGTATTCAACTTCTTGCGCAACAGTAACTTTACCTTCCTTGTTTCTCTCCTGCAGCTCTTGATCAAACCAAAGCAAAGACGTCAGTTTGGT",
            "alleles": ["A", "G"]
        },
        {
            "name": "seabream six6",
            "left": "AACCGCAGACAAAGAGACAGAGCAGCGGCTGCGAAGAACAGGTGAGCGACACGCTTCTCTCGGATGGTTTCTGGTCATGATAGCTGCAACATAAACACTTCAGCTGCTCACAGTAAAGAGGAAAAACTCCCCGCACAATGCTATCTAACAATCATTCCGTTTAATAACAAAACAGGCCGTAACCCGGGCTGGGTGCAGGTTCAGTTCTGACATGATTTCTCTGGATATTAGATTCAGAATGAGACTGTAATCCTGTAAATCTTTTCCGTTGTAATAAATGCTGCTCCCCGGTGTCTTTGTGACATATTTTAAGTGGGTTCGCATGCAGAATATGGAGGAAATAGAATAACAAAGATATGCTATAATTTCCTCTGTCATCTTTTTTTTTATTAACGTGAAAACAAAGCTCTGGAGAAATGA",
            "right": "AACATTTGGCCTAACCTTAATAATAAACTACGTTTTCACATTATTTAATGCTTGTGTGATTGTAAGTGCACCCCATTGCGTCTGTAGTAATATAAATCTAATATTTTAAATGTTTATAATATACTGCAATTTCCAATTATATCTGAGAGGCTTATTATTAGTATATGGGTCGAGGTCACTGCTGTTTTGGTCGTGTTTAATACAAATAAAACCGCCCATAATTTACCAGGACGTGTTAATAATGGGTGGCATGAACTAGACAGTAATCAGTGAGCTCTCCCCTGAAATTATCTTATTGCTATATTGTAAATATCCGATAAAATCCACCTTAATAGTGCTTGTTGTTTAATAAGGGGT",
            "alleles": ["C", "T"]
        },
        {
            "name": "seabream pigm",
            "left": "CCTTTGTTGGTGCAGACAGCAGGTGGAGCCAGTGGCTTGGCCTGGCAGCATTCCTGCCACAGCTCATCCTGCTGTTGGTGGCATCATGGGCCTTTCACTCTGACCTGGTTTTCTGCTGTTTCCTGCACACCGCCATCTTTGTCTCTTTCAACAAAGTCTGCACTTCACAGGTACACAAAGCACCAACAACAGCAGAGTTCAGAAGATGCATTGTTTTGCACTTACTGCTAGCCAGTTTTGACTTTCCCCTCGCAGTCATCAAAA",
            "right": "TGTATGAGGATTGAGATGACCTGTAAAAAGAAAAGGGATGGTTGTGTTGATCCACTTAAGAAGAGAGACAGTTTTTTCTTAGTTAGAATGGCACAACAATACATTCCAAAATGTCAAAGTGCAGGAGGCTTAATGAAAACGAAATTACCATACCATAATCACCGATCAGCGCGGCCTCAGTTTGGAGAAGCAGAGAGCCACTCCAGTCCAGATGCTCAGCTTTGTACTGCAGTGAAGGGGTCC",
            "alleles": ["C", "T"]
        },
        {
            "name": "labrax vgll3",
            "left": "TACCCTCCCCGATACCTGGACCTACAGCCTGAGCCCCCAGAGCACAAGTGGATACCCCAATGTCCACAATGTCTACCATCCTCACCCCCACCCACACATCCACACCCGGCACCACCACCCCATGCTCCATTCATACCCGACCCACAGCCCGACATTGGATCCCAGGTTCAATCCTCTGCTGCTGCCCGGTGTTAGAAACCAGAACCAGCCAACTGCCAGCACGGGGAGTTCCCCACACAGCGAGGGGGTGAAGACGGAGATGGAGCACAGCAGGAACAGCCCTGTTGCGGCTACCTCTGTCACCTGGACCCCCTCCGCCCTCCATGGA",
            "right": "CCTTGGAGGTGTATGACTCAGGTAGATACTACAAAACTAATGCTACACAGTAGAATTATACACTGACTTGCAAACATGTGTCACACTAAGTTATACAAGTACTAATTTTACCCTGTTTCTTTCTCTCCTGCAGCTCTTGATCAGACCAAAGCAAAGACATCAGTTTGGTTCTAACTGATGCCATAATAATCATTTCACACCAAAAAGGACGTACTATGTGGCTCAATCAATGTATGGCTGCAACACCAGCACTGTAATGTATAATGTAGATAGAAGGCTTACTGTAGCTCAGACTATGAGTCCTGCACTGTCCACACA",
            "alleles": ["G", "T"]
        },
        {
            "name": "labrax six6",
            "left": "GGCTACAGGACTTACACCCACACAAGTAGGAAACTGGTTCAAAAATCGCAGACAAAGAGACAGAGCGGCGGCTGCGAAGAACAGGTGAGATACATGCACCTCTCGGCTGGTTTCTGATCATGATAGCTGCAACAGAAAAACAAATTATTTTGGGAAAATACCACCCTGCATCGTGAGATTTCATTGGCGTTCAGTTTTAATATAGCAAAACATGCCAAAGCCCACGCTGGCTGCAGACATTCAGTTCAGATTCCTCTGGATATTAGATCCTAAAATCAGGGGATTTCTTTTCTTTTCTAATAAATGCTGCTCGCAGTGTCTGTAATGACATTATATTTTGAGTCGGTTGAAATGCCCCAAAAAAAATGGCCCAACAAATTTAATGATTTCATTTTAATTTCATTTTATTTTGGATTAATGTG",
            "right": "GAACAAAGCTCTGGATTTATTATTTTTTAAAATAGTGAATAAGATTATCACAATACTGGAGAACAACATCCATGCTAACATGAGGGGTAAGCTCCATTTACGTGTTATTCTATGCTTATTTTGATTGTTAGTGCAAGCCAGTAGGCCAGTGCATCTGTAACGATAATAATCTAACAGCTTCAGTGTATTTTAATGGATAATACACAGTAGCCTAATTTCCAAATAGGATTGTAGCCAGTCGGTTAAAGGCCTTGTGGGTGGAGTTCACACTGCTGTTGGGCATGTTTAATACAGATAAAATGATAATAATATTCCAGTAGGTATTAATAGTGAGTGGTACAACCTATAGTTTACAGTAATTAATGAGATATTCCTGAAATTATACTTAGTCTTATCGTATCTTAGTGTAAATAAGCGATCTTGCTGTGGTACTT",
            "alleles": ["A", "T"]
        },
        {
            "name": "labrax bcl6a",
            "left": "GCCGACACTTGCCATAGATTTATCAAGTCCAGGTAAAGGAAAATAGAAAATAATGACAAGAAGCACTCTAATGTCTAAAGAGATCCGAGTCGGAGGTACTAACTTATTGAATATGTTTCTGCAGGCATCAGTCTGTTAATGTTGAAGAGGTACAGATCAACTCGTT",
            "right": "CATCTGGCTGAGGAGATCCCTGCTTTGAAGCTTGTCGATAAAAAAGAGCCAGACTTTCAAAACAACCACACATCGACCTCAC",
            "alleles": ["A", "G"]
        }
    ]

    # Initialize counters for each marker
    results = { marker["name"]: {allele: 0 for allele in marker["alleles"]} for marker in markers }
    total_reads = 0

    try:
        records = SeqIO.parse(fastq_file, "fastq")
    except Exception as e:
        print("Error reading FASTQ file:", e)
        sys.exit(1)

    # Process each read
    for record in records:
        total_reads += 1
        seq = str(record.seq).upper()
        for marker in markers:
            left = marker["left"]
            # Use only the first 10 bases of the right flank as a minimal requirement
            right_prefix = marker["right"][:10]
            # Build a regex pattern that searches for the left flank (with up to 1 error),
            # followed by one nucleotide (the SNP), then the right flank prefix (with up to 1 error)
            pattern = regex.compile(
                r"(" + regex.escape(left) + r"){e<=1}([ACGT])(" + regex.escape(right_prefix) + r"){e<=1}",
                regex.IGNORECASE)
            match = pattern.search(seq)
            if match:
                allele_found = match.group(2).upper()
                if allele_found in marker["alleles"]:
                    results[marker["name"]][allele_found] += 1

    # Report the results
    print(f"\nProcessed {total_reads} reads from file {fastq_file}\n")
    for marker in markers:
        counts = results[marker["name"]]
        if len(marker["alleles"]) == 2:
            allele1, allele2 = marker["alleles"]
            print(f"In file {fastq_file} there are {counts[allele1]} {allele1} and {counts[allele2]} {allele2} for {marker['name']}.")
        else:
            # In case there are more allele options
            alleles_str = " and ".join([f"{counts[a]} {a}" for a in marker["alleles"]])
            print(f"In file {fastq_file} for {marker['name']}: {alleles_str}.")

if __name__ == "__main__":
    main()